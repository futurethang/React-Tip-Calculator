{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","state","billTotal","taxes","partySize","tipPercent","tipTotal","updateBalance","_callee","updateObj","newValue","propToUpdate","updatedState","regenerator_default","a","wrap","_context","prev","next","Object","objectSpread","_this","setState","updateTip","stop","_this$state","outPut","parseFloat","toFixed","incrementPartySize","_callee2","newSize","_context2","decrementPartySize","_callee3","_context3","react_default","createElement","className","Header","App_InputCheck","label","this","dataProp","balance","SplitSettings","increment","decrement","App_TipSettings","TipTotal","React","Component","InputCheck","props","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","target","value","amount","type","step","placeholder","onChange","TipSettings","slice","_this3","min","max","onClick","name","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAWMA,oNACJC,MAAQ,CACNC,UAAW,EACXC,MAAO,EACPC,UAAW,EACXC,WAAY,GACZC,SAAU,KAGZC,oDAAgB,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACNR,EAA2BD,EAA3BC,SAAUC,EAAiBF,EAAjBE,cACdC,EAFUO,OAAAC,EAAA,EAAAD,CAAA,GAEeE,EAAKpB,QACrBU,GAAgBD,EAHfM,EAAAE,KAAA,EAKRG,EAAKC,SAASV,GALN,OAMdS,EAAKE,YANS,wBAAAP,EAAAQ,SAAAhB,8DAShBe,UAAY,WAAM,IAAAE,EACoCJ,EAAKpB,MAAjDC,EADQuB,EACRvB,UAAWC,EADHsB,EACGtB,MAAOC,EADVqB,EACUrB,UAAWC,EADrBoB,EACqBpB,WAIjCqB,EAASC,aAHIzB,EAAYC,GACSC,GACnBC,EAAa,MAC4BuB,QAAQ,IAEpEP,EAAKC,SAAS,CACZhB,SAAUoB,OAIdG,wCAAqB,SAAAC,IAAA,IAAAC,EAAA,OAAAlB,EAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,cACfa,EAAUV,EAAKpB,MAAMG,UAAY,EADlB4B,EAAAd,KAAA,EAEbG,EAAKC,SAAS,CAClBlB,UAAW2B,IAHM,OAKnBV,EAAKE,YALc,wBAAAS,EAAAR,SAAAM,QAQrBG,wCAAqB,SAAAC,IAAA,IAAAH,EAAA,OAAAlB,EAAAC,EAAAC,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAGda,EADLV,EAAKpB,MAAMG,WAAa,EACT,EACAiB,EAAKpB,MAAMG,UAAY,EAJnB+B,EAAAjB,KAAA,EAMbG,EAAKC,SAAS,CAClBlB,UAAW2B,IAPM,OASnBV,EAAKE,YATc,wBAAAY,EAAAX,SAAAU,8EAanB,OACEE,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,OACbF,EAAAtB,EAAAuB,cAACE,EAAD,MACAH,EAAAtB,EAAAuB,cAACG,EAAD,CACEC,MAAM,aACNlC,cAAemC,KAAKnC,cACpBoC,SAAS,YACTC,QAASF,KAAKzC,MAAMC,YAEtBkC,EAAAtB,EAAAuB,cAACG,EAAD,CACEC,MAAM,QACNlC,cAAemC,KAAKnC,cACpBoC,SAAS,QACTC,QAASF,KAAKzC,MAAME,QAEtBiC,EAAAtB,EAAAuB,cAACQ,EAAD,CACEJ,MAAM,QACNrC,UAAWsC,KAAKzC,MAAMG,UACtB0C,UAAWJ,KAAKb,mBAChBkB,UAAWL,KAAKT,qBAElBG,EAAAtB,EAAAuB,cAACW,EAAD,CACEP,MAAM,MACNpC,WAAYqC,KAAKzC,MAAMI,WACvBE,cAAemC,KAAKnC,cACpBoC,SAAS,eAEXP,EAAAtB,EAAAuB,cAACY,EAAD,CAAUR,MAAM,aAAanC,SAAUoC,KAAKzC,MAAMK,mBA9ExC4C,IAAMC,YAwFxB,SAASZ,IACP,OACEH,EAAAtB,EAAAuB,cAAA,WACED,EAAAtB,EAAAuB,cAAA,UAAQC,UAAU,cAChBF,EAAAtB,EAAAuB,cAAA,kCAUFe,cACJ,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAnC,OAAAoC,EAAA,EAAApC,CAAAuB,KAAAU,IACtBE,EAAAnC,OAAAqC,EAAA,EAAArC,CAAAuB,KAAAvB,OAAAsC,EAAA,EAAAtC,CAAAiC,GAAAM,KAAAhB,KAAMW,KAMRM,aAAe,SAACC,GACd,IACInD,EAAY,CACdC,SAFaiB,WAAWiC,EAAEC,OAAOC,OAAOlC,QAAQ,GAGhDjB,aAAc2C,EAAKD,MAAMV,UAE3BW,EAAKD,MAAM9C,cAAcE,IAXzB6C,EAAKrD,MAAQ,CACX8D,OAAQ,GAHYT,wEAiBtB,OACElB,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,WACbF,EAAAtB,EAAAuB,cAAA,SAAOC,UAAU,cAAcI,KAAKW,MAAMZ,OAC1CL,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,aACbF,EAAAtB,EAAAuB,cAAA,iBACAD,EAAAtB,EAAAuB,cAAA,SACE2B,KAAK,SACLC,KAAK,OACL3B,UAAU,iBACV4B,YAAaxB,KAAKW,MAAMT,QACxBuB,SAAUzB,KAAKiB,wBA5BFT,IAAMC,WAwCzBiB,6MACJT,aAAe,SAACC,GACd,IACInD,EAAY,CACdC,SAFaiB,WAAWiC,EAAEC,OAAOC,MAAMO,MAAM,EAAG,KAAO,EAGvD1D,aAAc2D,EAAKjB,MAAMV,UAE3B2B,EAAKjB,MAAM9C,cAAcE,4EAIzB,OACE2B,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,WACbF,EAAAtB,EAAAuB,cAAA,SAAOC,UAAU,cAAcI,KAAKW,MAAMZ,OAC1CL,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,aACbF,EAAAtB,EAAAuB,cAAA,SACE2B,KAAK,SACLO,IAAI,IACJC,IAAI,MACJP,KAAK,IACL3B,UAAU,sBACV4B,YAAaxB,KAAKW,MAAMhD,WACxB8D,SAAUzB,KAAKiB,eAEjBvB,EAAAtB,EAAAuB,cAAA,0BAxBgBa,IAAMC,WAoChC,SAASN,EAAcQ,GACrB,OACEjB,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,WACbF,EAAAtB,EAAAuB,cAAA,SAAOC,UAAU,cAAce,EAAMZ,OACrCL,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,aACbF,EAAAtB,EAAAuB,cAAA,QAAMC,UAAU,yBAAhB,YAAkDe,EAAMjD,WACxDgC,EAAAtB,EAAAuB,cAAA,QAAMoC,QAAS,kBAAMpB,EAAMP,cAA3B,KACAV,EAAAtB,EAAAuB,cAAA,QAAMoC,QAAS,kBAAMpB,EAAMN,cAA3B,YAUR,SAASE,EAASI,GAChB,OACEjB,EAAAtB,EAAAuB,cAAA,OAAKC,UAAU,WACbF,EAAAtB,EAAAuB,cAAA,SAAOC,UAAU,cAAce,EAAMZ,OACrCL,EAAAtB,EAAAuB,cAAA,SAAO2B,KAAK,WAAWU,KAAK,gBAC5BtC,EAAAtB,EAAAuB,cAAA,QAAMC,UAAU,YAAhB,IAA6Be,EAAM/C,WAQ1BN,QC/MK2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAtB,EAAAuB,cAAC6C,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2332f08a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nexport interface ITipCalculator {\n  billTotal: number;\n  taxes: number;\n  partySize: number;\n  tipPercent: number;\n  tipTotal: number;\n}\n\nclass App extends React.Component<any, ITipCalculator> {\n  state = {\n    billTotal: 0,\n    taxes: 0,\n    partySize: 1,\n    tipPercent: 20,\n    tipTotal: 0\n  };\n\n  updateBalance = async (updateObj: any) => {\n    const { newValue, propToUpdate } = updateObj;\n    let updatedState: any = { ...this.state };\n    updatedState[propToUpdate] = newValue;\n    // debugger;\n    await this.setState(updatedState);\n    this.updateTip();\n  };\n\n  updateTip = () => {\n    const { billTotal, taxes, partySize, tipPercent } = this.state;\n    let totalNoTax = billTotal - taxes;\n    let dividedByPartySize = totalNoTax / partySize;\n    let tipAsPercent = tipPercent / 100;\n    let outPut = parseFloat((dividedByPartySize * tipAsPercent).toFixed(2));\n    // debugger;\n    this.setState({\n      tipTotal: outPut\n    });\n  };\n\n  incrementPartySize = async () => {\n    let newSize = this.state.partySize + 1;\n    await this.setState({\n      partySize: newSize\n    });\n    this.updateTip();\n  };\n\n  decrementPartySize = async () => {\n    let newSize;\n    this.state.partySize <= 1\n      ? (newSize = 1) // prevent the count from being lower than 1\n      : (newSize = this.state.partySize - 1);\n\n    await this.setState({\n      partySize: newSize\n    });\n    this.updateTip();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <InputCheck\n          label=\"bill total\"\n          updateBalance={this.updateBalance}\n          dataProp=\"billTotal\"\n          balance={this.state.billTotal}\n        />\n        <InputCheck\n          label=\"taxes\"\n          updateBalance={this.updateBalance}\n          dataProp=\"taxes\"\n          balance={this.state.taxes}\n        />\n        <SplitSettings\n          label=\"split\"\n          partySize={this.state.partySize}\n          increment={this.incrementPartySize}\n          decrement={this.decrementPartySize}\n        />\n        <TipSettings\n          label=\"tip\"\n          tipPercent={this.state.tipPercent}\n          updateBalance={this.updateBalance}\n          dataProp=\"tipPercent\"\n        />\n        <TipTotal label=\"amount due\" tipTotal={this.state.tipTotal} />\n      </div>\n    );\n  }\n}\n//>>>>>>>>>>>>>>>>>>>>>>>>> END APP\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>>>>>>>>>> HEADER\nfunction Header(): JSX.Element {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h1>TIP CALCULATOR</h1>\n      </header>\n    </div>\n  );\n}\n//>>>>>>>>>>>>>>>>>>>>>>>>> END HEADER\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>>> INPUTCHECK\nclass InputCheck extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      amount: 0.0\n    };\n  }\n\n  handleChange = (e: any) => {\n    let newValue = parseFloat(e.target.value).toFixed(2);\n    let updateObj = {\n      newValue: newValue,\n      propToUpdate: this.props.dataProp\n    };\n    this.props.updateBalance(updateObj);\n  };\n\n  render() {\n    return (\n      <div className=\"section\">\n        <label className=\"inputLabel\">{this.props.label}</label>\n        <div className=\"inputArea\">\n          <span>$</span>\n          <input\n            type=\"number\"\n            step=\"0.01\"\n            className=\"inputArea_text\"\n            placeholder={this.props.balance}\n            onChange={this.handleChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n//>>>>>>>>>>>>>>>>>> END INPUTCHECK\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>>> TIPSETTINGS\nclass TipSettings extends React.Component<any, any> {\n  handleChange = (e: any) => {\n    let newValue = parseFloat(e.target.value.slice(0, 2)) || 0;\n    let updateObj = {\n      newValue: newValue,\n      propToUpdate: this.props.dataProp\n    };\n    this.props.updateBalance(updateObj);\n  };\n\n  render() {\n    return (\n      <div className=\"section\">\n        <label className=\"inputLabel\">{this.props.label}</label>\n        <div className=\"inputArea\">\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"100\"\n            step=\"1\"\n            className=\"inputArea_text--tip\"\n            placeholder={this.props.tipPercent}\n            onChange={this.handleChange}\n          />\n          <span>%</span>\n        </div>\n        {/* replace with onTouch slider UI element that modifies state */}\n      </div>\n    );\n  }\n}\n//>>>>>>>>>>>>>>>>>> END TIPSETTINGS\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>> SPLITSETTINGS\nfunction SplitSettings(props: any): JSX.Element {\n  return (\n    <div className=\"section\">\n      <label className=\"inputLabel\">{props.label}</label>\n      <div className=\"inputArea\">\n        <span className=\"inputArea_text--split\">party of {props.partySize}</span>\n        <span onClick={() => props.increment()}>+</span>\n        <span onClick={() => props.decrement()}>&#8211;</span>\n      </div>\n    </div>\n  );\n}\n//>>>>>>>>>>>>>>> END SPLITSETTINGS\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>> TIP TOTAL\nfunction TipTotal(props: any): JSX.Element {\n  return (\n    <div className=\"section\">\n      <label className=\"inputLabel\">{props.label}</label>\n      <input type=\"checkbox\" name=\"splitToggle\" />\n      <span className=\"taxTotal\">${props.tipTotal}</span>\n    </div>\n  );\n}\n//>>>>>>>>>>>>>>>>> END  TIP TOTAL\n\n//------------------------------------------------------\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}