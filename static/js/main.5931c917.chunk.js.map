{"version":3,"sources":["Components/Header.tsx","Components/InputCheck.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","react_default","a","createElement","className","InputCheck","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","updateObj","newValue","parseFloat","target","value","toFixed","propToUpdate","dataProp","updateBalance","state","amount","label","type","step","placeholder","balance","onChange","React","Component","App","billTotal","taxes","partySize","tipPercent","tipTotal","grandTotal","hue","_callee","updatedState","regenerator_default","wrap","_context","prev","next","objectSpread","setState","updateTip","stop","_this$state","Math","round","Number","outPut","incrementPartySize","_callee2","newSize","_context2","decrementPartySize","_callee3","_context3","style","backgroundColor","concat","InputCheck_InputCheck","App_TipSettings","SplitSettings","increment","decrement","TipTotal","GrandTotal","onClick","TipSettings","slice","_this2","slideTipUpdate","_callee4","tip","touchScale","xScale","updateHue","_context4","_this3","onTouchMove","touches","clientX","justifyContent","min","max","fontSize","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5931c917.chunk.js","sourcesContent":["import React from \"react\";\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>>>>>>>>>> HEADER\nexport default function Header(): JSX.Element {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h1>TIP CALCULATOR</h1>\n      </header>\n    </div>\n  );\n}\n//>>>>>>>>>>>>>>>>>>>>>>>>> END HEADER\n","import React from \"react\";\nimport \"../App.css\";\n\nexport interface ITipCalculator {\n  // Defin the shape of the main State object\n  billTotal: number;\n  taxes: number;\n  partySize: number;\n  tipPercent: number;\n  tipTotal: number;\n  grandTotal: number;\n}\n\n//>>>>>>>>>>>>>>>>>> INPUTCHECK\nexport default class InputCheck extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      amount: 0.0\n    };\n  }\n\n  handleChange = (e: any) => {\n    let newValue = parseFloat(e.target.value).toFixed(2);\n    let updateObj = {\n      newValue: newValue,\n      propToUpdate: this.props.dataProp\n    };\n    this.props.updateBalance(updateObj);\n  };\n\n  render() {\n    return (\n      <div className=\"section\">\n        <label className=\"inputLabel\">{this.props.label}</label>\n        <div className=\"inputArea\">\n          <span>$</span>\n          <input\n            type=\"number\"\n            step=\"0.01\"\n            className=\"inputArea_text\"\n            placeholder={this.props.balance}\n            onChange={this.handleChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n//>>>>>>>>>>>>>>>>>> END INPUTCHECK","import React from \"react\";\nimport Header from \"./Components/Header\";\nimport InputCheck from \"./Components/InputCheck\";\nimport \"./App.css\";\n\nexport interface ITipCalculator {\n  // Defin the shape of the main State object\n  billTotal: number;\n  taxes: number;\n  partySize: number;\n  tipPercent: number;\n  tipTotal: number;\n  grandTotal: number;\n}\n\nclass App extends React.Component<any, ITipCalculator> {\n  state = {\n    billTotal: 0, // bill total before tax\n    taxes: 0, // taxes on bill\n    partySize: 1, // number of people sharing the tip total\n    tipPercent: 18, // percent to tip\n    tipTotal: 0, // calculated tip amount, excluding tax from the total\n    grandTotal: 0, // final paymeny total, tax and tip included\n    hue: 100 // style variable to update the app background color\n  };\n\n  // a function that receives properties and values as input and updates state\n  updateBalance = async (updateObj: any) => {\n    const { newValue, propToUpdate } = updateObj;\n    // console.log(newValue, propToUpdate);\n    let updatedState: any = { ...this.state };\n    updatedState[propToUpdate] = newValue;\n    // debugger;\n    await this.setState(updatedState);\n    this.updateTip();\n  };\n\n  // function to calculate the correct tip total and grand total to update to the state\n  updateTip = () => {\n    const { billTotal, taxes, partySize, tipPercent } = this.state;\n    let totalNoTax = billTotal - taxes;\n    let tipAsPercent = tipPercent / 100;\n    let tipTotal = totalNoTax * tipAsPercent || 0; // default to 0 to avoid NaN\n    let grandTotal = Math.round((Number(billTotal) + tipTotal) * 1e2) / 1e2; // rounded and parsed to display dollars.cents float format correctly\n    let outPut = Math.round((tipTotal / partySize) * 1e2) / 1e2;\n    this.setState({\n      tipTotal: outPut,\n      grandTotal: grandTotal\n    });\n  };\n\n  // action functions to adjust party size\n  incrementPartySize = async () => {\n    let newSize = this.state.partySize + 1;\n    await this.setState({\n      partySize: newSize\n    });\n    this.updateTip();\n  };\n\n  decrementPartySize = async () => {\n    let newSize;\n    this.state.partySize <= 1\n      ? (newSize = 1) // prevent the count from being lower than 1\n      : (newSize = this.state.partySize - 1);\n\n    await this.setState({\n      partySize: newSize\n    });\n    this.updateTip();\n  };\n\n  render() {\n    return (\n      <div\n        className=\"App\"\n        style={{ backgroundColor: `hsla(${this.state.hue},60%,90%,1)` }}\n      >\n        <Header />\n        <InputCheck\n          label=\"bill total\"\n          updateBalance={this.updateBalance}\n          dataProp=\"billTotal\"\n          balance={this.state.billTotal}\n        />\n        <InputCheck\n          label=\"taxes\"\n          updateBalance={this.updateBalance}\n          dataProp=\"taxes\"\n          balance={this.state.taxes}\n        />\n        <TipSettings\n          label=\"tip\"\n          tipPercent={this.state.tipPercent}\n          updateBalance={this.updateBalance}\n          dataProp=\"tipPercent\"\n        />\n        <SplitSettings\n          label=\"split\"\n          partySize={this.state.partySize}\n          increment={this.incrementPartySize}\n          decrement={this.decrementPartySize}\n        />\n        <TipTotal label=\"tip per person\" tipTotal={this.state.tipTotal} />\n        <GrandTotal\n          label=\"total amount due\"\n          grandTotal={this.state.grandTotal}\n        />\n      </div>\n    );\n  }\n}\n//>>>>>>>>>>>>>>>>>>>>>>>>> END APP\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>>> INPUTCHECK\n// class InputCheck extends React.Component<any, any> {\n//   constructor(props: any) {\n//     super(props);\n//     this.state = {\n//       amount: 0.0\n//     };\n//   }\n\n//   handleChange = (e: any) => {\n//     let newValue = parseFloat(e.target.value).toFixed(2);\n//     let updateObj = {\n//       newValue: newValue,\n//       propToUpdate: this.props.dataProp\n//     };\n//     this.props.updateBalance(updateObj);\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"section\">\n//         <label className=\"inputLabel\">{this.props.label}</label>\n//         <div className=\"inputArea\">\n//           <span>$</span>\n//           <input\n//             type=\"number\"\n//             step=\"0.01\"\n//             className=\"inputArea_text\"\n//             placeholder={this.props.balance}\n//             onChange={this.handleChange}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n//>>>>>>>>>>>>>>>>>> END INPUTCHECK\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>> SPLITSETTINGS\nfunction SplitSettings(props: any): JSX.Element {\n  return (\n    <div className=\"section\">\n      <label className=\"inputLabel\">{props.label}</label>\n      <div className=\"inputArea\">\n        <span className=\"inputArea_text--split\">\n          party of {props.partySize}\n        </span>\n        <div className=\"addMinusButtons\">\n          <span onClick={() => props.increment()}>\n            <i className=\"icon fas fa-plus-circle\" />\n          </span>\n          <span onClick={() => props.decrement()}>\n            <i className=\"icon fas fa-minus-circle\" />\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n//>>>>>>>>>>>>>>> END SPLITSETTINGS\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>>> TIPSETTINGS\nclass TipSettings extends React.Component<any, any> {\n  handleChange = (e: any) => {\n    let newValue = parseFloat(e.target.value.slice(0, 2)) || 0;\n    let updateObj = {\n      newValue: newValue,\n      propToUpdate: this.props.dataProp\n    };\n    this.props.updateBalance(updateObj);\n  };\n  // live-update function that converts the user's touch response into hue shifted backround that mirrors the service experience\n  slideTipUpdate = async (e: number) => {\n    let tip; // default tip amount to adjust with swipe\n    let minimumTip: number = 10;\n    let maximumTip: number = 35;\n    let minimumHue: number = 0;\n    let maximumHue: number = 200;\n    let maxWidth: number = 375;\n    let touchScale: number;\n    let xScale = e / maxWidth;\n    touchScale = xScale > 1 ? 1 : xScale;\n    tip = touchScale * maximumTip > minimumTip ? touchScale * maximumTip : 10;\n    tip = tip.toFixed(0);\n    let hue: any =\n      touchScale * maximumHue > minimumHue ? touchScale * maximumHue : 0;\n    hue = hue.toFixed(0);\n    const updateTip = {\n      newValue: tip,\n      propToUpdate: this.props.dataProp\n    };\n    const updateHue = {\n      newValue: hue,\n      propToUpdate: \"hue\"\n    };\n    // console.log(updateHue.newValue);\n    await this.props.updateBalance(updateTip);\n    this.props.updateBalance(updateHue);\n  };\n\n  render() {\n    return (\n      <div\n        className=\"section tipPercent\"\n        onTouchMove={e => {\n          this.slideTipUpdate(e.touches[0].clientX);\n        }}\n      >\n        <label className=\"inputLabel\">{this.props.label}</label>\n        <div className=\"inputArea\" style={{ justifyContent: \"flex-start\" }}>\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"100\"\n            step=\"1\"\n            className=\"inputArea_text--tip\"\n            placeholder={this.props.tipPercent}\n            onChange={this.handleChange}\n          />\n          <span>%</span>\n          <div className=\"shine\" style={{ fontSize: \".5em\", marginLeft: \"1em\" }}>slide to adjust tip</div>\n        </div>\n        {/* replace with onTouch slider UI element that modifies state */}\n      </div>\n    );\n  }\n}\n//>>>>>>>>>>>>>>>>>> END TIPSETTINGS\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>> TIP TOTAL\nfunction TipTotal(props: any): JSX.Element {\n  return (\n    <div className=\"section\">\n      <label className=\"inputLabel\">{props.label}</label>\n      <span className=\"taxTotal\">${props.tipTotal}</span>\n    </div>\n  );\n}\n//>>>>>>>>>>>>>>>>> END  TIP TOTAL\n\n//------------------------------------------------------\n\n//>>>>>>>>>>>>>>>>> GRAND TOTAL\nfunction GrandTotal(props: any): JSX.Element {\n  return (\n    <div className=\"section\">\n      <label className=\"inputLabel\">{props.label}</label>\n      <span className=\"taxTotal\">${props.grandTotal}</span>\n    </div>\n  );\n}\n//>>>>>>>>>>>>>>>>> END  GRAND TOTAL\n\n//------------------------------------------------------\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}